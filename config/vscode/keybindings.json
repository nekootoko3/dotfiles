// Place your key bindings in this file to overwrite the defaults
[
  {
    "key": "up",
    "command": "cursorUp",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
    "key": "down",
    "command": "cursorDown",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
    "key": "k",
    "command": "cursorUp",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
    "key": "j",
    "command": "cursorDown",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
    "key": "cmd+h",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "shift+cmd+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+g g",
    "command": "-workbench.view.scm",
    "when": "gitlens:enabled && gitlens:keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm"
  },
  {
    "key": "alt+cmd+-",
    "command": "workbench.action.decreaseViewSize"
  },
  {
    "key": "alt+cmd+=",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "cmd+-",
    "command": "editor.action.fontZoomOut"
  },
  {
    "key": "cmd+=",
    "command": "editor.action.fontZoomIn"
  },
  {
    "key": "cmd+numpad_add",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "cmd+=",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "cmd+0",
    "command": "editor.action.fontZoomReset"
  },
  {
    "key": "cmd+numpad0",
    "command": "-workbench.action.zoomReset"
  },
  {
    "key": "cmd+numpad_subtract",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "cmd+-",
    "command": "-workbench.action.zoomOut"
  },
  {
    "key": "cmd+k cmd+d",
    "command": "workbench.view.extension.dockerView"
  },
  {
    "key": "cmd+k cmd+e",
    "command": "workbench.view.explorer"
  },
  {
    "key": "cmd+k cmd+x",
    "command": "workbench.view.extensions"
  },
  {
    "key": "cmd+k cmd+p",
    "command": "workbench.view.extension.github-pull-requests"
  },
  {
    "key": "cmd+k cmd+g",
    "command": "workbench.view.scm"
  },
  {
    "key": "cmd+k cmd+b",
    "command": "workbench.view.extension.bookmarks"
  },
  {
    "key": "cmd+k cmd+l",
    "command": "workbench.view.extension.gitlens"
  },
  {
    "key": "cmd+b",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "alt+cmd+p",
    "command": "-projectManager.listProjects"
  },
  {
    "key": "cmd+g cmd+g",
    "command": "gitlens.showQuickRepoStatus"
  },
  {
    "key": "s t",
    "command": "extension.ghqOpenInNewWindow",
    "when": "!listFocus && !editorFocus && !inputFocus && !textInputFocus"
  },
  {
    "key": "ctrl+cmd+[",
    "command": "-workbench.action.showPreviousWindowTab"
  },
  //  {
  //    "key": "shift+cmd+[",
  //    "command": "-workbench.action.previousEditor"
  //  },
  //  {
  //    "key": "shift+cmd+[",
  //    "command": "workbench.action.showPreviousWindowTab"
  //  },
  //  {
  //    "key": "shift+cmd+]",
  //    "command": "-workbench.action.nextEditor"
  //  },
  //  {
  //    "key": "shift+cmd+]",
  //    "command": "workbench.action.showNextWindowTab"
  //  },
  {
    "key": "shift+alt+f12",
    "command": "-references-view.find",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "cmd+k cmd+c",
    "command": "-editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+k cmd+c",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  // {
  //   "key": "tab",
  //   "command": "extension.vim_tab",
  //   "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  // },
  // {
  //   "key": "ctrl+e",
  //   "command": "-extension.vim_ctrl+e",
  //   "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
  // },
  {
    "key": "ctrl+p",
    "command": "workbench.action.previousEditor",
    "when": "vim.active && editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.nextEditor",
    "when": "vim.active && editorTextFocus && vim.mode == 'Normal'"
  },
  {
    "key": "shift+f12",
    "command": "-editor.action.referenceSearch.trigger",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  // emmet
  //-----------------------------------------------
  {
    "key": "ctrl+t",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && editorLangId == 'typescriptreact' &&  vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+t",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && editorLangId == 'javascriptreact' &&  vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+t",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && editorLangId == 'javascript' &&  vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+t",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && editorLangId == 'html' &&  vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+t",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && editorLangId == 'erb' &&  vim.mode == 'Insert'"
  },
  {
    "key": "tab",
    "command": "-editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  // Git add
  //-----------------------------------------------
  {
    "key": "a",
    "command": "git.stageSelectedRanges",
    "when": "editorTextFocus && !editorReadonly && vim.active && vim.mode =~ /Visual/"
  },
  {
    "key": "shift+cmd+t",
    "command": "-extension.runFileSpecs"
  },
  {
    "key": "cmd+k cmd+o",
    "command": "workbench.action.closeOtherEditors"
  },
  {
    "key": "alt+cmd+t",
    "command": "-workbench.action.closeOtherEditors"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openFileFolder"
  },
  {
    "key": "cmd+r",
    "command": "-extension.runAllSpecFiles"
  },
  {
    "key": "cmd+k cmd+t",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key": "cmd+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "cmd+k cmd+a",
    "command": "workbench.action.terminal.kill"
  },
  {
    "key": "cmd+k cmd+i",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal"
  },
  {
    "key": "cmd+k cmd+i",
    "command": "-editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+k cmd+i",
    "command": "-editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  {
    "key": "ctrl+s",
    "command": "fuzzySearch.activeTextEditor"
  },
  {
    "key": "cmd+k cmd+n",
    "command": "notifications.clearAll"
  },
  {
    "key": "cmd+g cmd+o",
    "command": "extension.openInGitHub"
  },
  {
    "key": "ctrl+l g",
    "command": "-extension.openInGitHub"
  },
  {
    "key": "cmd+g cmd+c",
    "command": "pr.create"
  },
  {
    "key": "cmd+g cmd+r",
    "command": "pr.openPullRequestInGitHub"
  },
  {
    "key": "cmd+g cmd+f",
    "command": "git.checkout"
  },
  {
    "key": "cmd+g cmd+l",
    "command": "git.pull"
  },
  {
    "key": "cmd+g cmd+p",
    "command": "git.push"
  },
  {
    "key": "ctrl+o",
    "command": "-lineBreakInsert",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.navigateForward",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.navigateBack",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack"
  },
  {
    "key": "-",
    "command": "patternSwitch.switchUnderCursor",
    "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
  },
  //=== Vim: (insert mode) Emacs
  //==============================================================================================
  {
    "key": "ctrl+a",
    "command": "cursorHome",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+e",
    "command": "cursorEnd",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+k",
    "command": "deleteAllRight",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "editorTextFocus && !suggestWidgetVisible && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+p",
    "command": "cursorUp",
    "when": "editorTextFocus && !suggestWidgetVisible && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+h",
    "command": "deleteLeft",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+d",
    "command": "deleteRight",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
  },

  //=== Toggle Fold
  //==============================================================================================
  {
    "key": "cmd+k cmd+k",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+k cmd+l",
    "command": "-editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+k cmd+k",
    "command": "-editor.action.defineKeybinding",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
  },
  {
    "key": "cmd+k cmd+k",
    "command": "-keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  //=== ctrl-l for integrated terminal
  //==============================================================================================
  {
    "key": "ctrl+l c",
    "command": "-extension.copyGitHubLinkToClipboard"
  },
  {
    "key": "ctrl+l p",
    "command": "-extension.openPrGitProvider"
  },
  //=== Stage and Unstage selected lines on editor
  //==============================================================================================
  {
    "key": "a",
    "command": "git.stage",
    "when": "!editorTextFocus && !inputFocus"
  },
  {
    "key": "u",
    "command": "git.unstage",
    "when": "!editorTextFocus && !inputFocus"
  },
  {
    "key": "ctrl+t",
    "command": "-editor.action.transposeLetters",
    "when": "textInputFocus && !editorReadonly"
  },

  //=== Shortcut to focus next and previous vscode's terminal
  //==============================================================================================
  { "key": "cmd+shift+j", "command": "workbench.action.terminal.focusNext" },
  {
    "key": "cmd+shift+k",
    "command": "workbench.action.terminal.focusPrevious"
  },

  //=== switch cursor between window
  //==============================================================================================
  {
    "key": "cmd+shift+l",
    "command": "workbench.action.showNextWindowTab"
  },
  {
    "key": "cmd+shift+h",
    "command": "workbench.action.showPreviousWindowTab"
  },
  {
    "key": "shift+cmd+h",
    "command": "-workbench.action.replaceInFiles"
  },

  // editor navigation
  //==============================================================================================
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "editorTextFocus && vim.active && vim.mode == Normal"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "editorTextFocus && vim.active && vim.mode == Normal"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "editorTextFocus && vim.active && vim.mode == Normal"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "editorTextFocus && vim.active && vim.mode == Normal"
  },

  //=== replace
  //==============================================================================================
  {
    "key": "cmd+r",
    "command": "editor.action.startFindReplaceAction"
  },
  // {
  //   "key": "alt+cmd+f",
  //   "command": "-editor.action.startFindReplaceAction"
  // },
  {
    "key": "cmd+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },

  //=== Add corsor
  //==============================================================================================
  {
    "key": "alt+cmd+k",
    "command": "-keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+cmd+k",
    "command": "-bookmarks.toggle",
    "when": "editorTextFocus"
  },

  {
    "key": "alt+cmd+k",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+up",
    "command": "-editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+j",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+down",
    "command": "-editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+j",
    "command": "-bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+cmd+j",
    "command": "-liveshare.join",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },

  //=== easy jest
  //==============================================================================================
  {
    "key": "cmd+l",
    "command": "extension.runJest",
    "when": "editorLangId == 'javascript'"
  },
  {
    "key": "cmd+t",
    "command": "extension.runJestFile",
    "when": "editorLangId == 'javascript'"
  },
  {
    "key": "cmd+y",
    "command": "extension.runPrevJest",
    "when": "editorLangId == 'javascript'"
  },
  {
    "key": "cmd+l",
    "command": "extension.runJest",
    "when": "editorLangId == 'typescript'"
  },
  {
    "key": "cmd+t",
    "command": "extension.runJestFile",
    "when": "editorLangId == 'typescript'"
  },
  {
    "key": "cmd+y",
    "command": "extension.runPrevJest",
    "when": "editorLangId == 'typescript'"
  },
  {
    "key": "cmd+l",
    "command": "extension.runJest",
    "when": "editorLangId == 'typescriptreact'"
  },
  {
    "key": "cmd+t",
    "command": "extension.runJestFile",
    "when": "editorLangId == 'typescriptreact'"
  },
  {
    "key": "cmd+y",
    "command": "extension.runPrevJest",
    "when": "editorLangId == 'typescriptreact'"
  },

  //=== easy rspec
  //==============================================================================================
  {
    "key": "cmd+y",
    "command": "extension.runLastSpec",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "cmd+y",
    "command": "-extension.runLastSpec"
  },
  {
    "key": "cmd+l",
    "command": "extension.runSpecLine",
    "when": "editorLangId == 'ruby'"
  },
  {
    "key": "cmd+l",
    "command": "-extension.runSpecLine"
  },
  {
    "key": "cmd+t",
    "command": "extension.runFileSpecs",
    "when": "editorLangId == 'ruby'"
  },

  //=== quick task
  //==============================================================================================
  {
    "key": "cmd+k cmd+r",
    "command": "-workbench.action.keybindingsReference"
  },
  {
    "key": "cmd+k cmd+r",
    "command": "quicktask.showTasks"
  },

  //=== bookmark
  //==============================================================================================
  {
    "key": "alt+cmd+l",
    "command": "-bookmarks.jumpToNext",
    "when": "editorTextFocus"
  },
  //=== focus peek view
  //==============================================================================================
  {
    "key": "ctrl+h",
    "command": "togglePeekWidgetFocus",
    "when": "!inReferenceSearchEditor && referenceSearchVisible"
  },
  {
    "key": "ctrl+l",
    "command": "togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor && vim.active && vim.mode == 'Normal'"
  },
  {
    "key": "cmd+k f2",
    "command": "-togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  //=== https://marketplace.visualstudio.com/items?itemName=jakearl.search-editor-apply-changes
  //==============================================================================================
  {
    "key": "cmd+s",
    "command": "searchEditorApplyChanges.apply",
    "when": "inSearchEditor"
  },
  //=== search.action.openNewEditor
  //==============================================================================================
  {
    "key": "shift+cmd+f",
    "command": "-workbench.view.search",
    "when": "!searchViewletVisible"
  },
  {
    "key": "shift+cmd+f",
    "command": "-workbench.action.findInFiles"
  },
  {
    "key": "shift+cmd+f",
    "command": "-workbench.action.findInFiles"
  },
  {
    "key": "shift+cmd+f",
    "command": "search.action.openNewEditor"
  },
  //=== SearchEditor: Navigation
  //=== https://github.com/microsoft/vscode/issues/23931#issuecomment-597503288
  //==============================================================================================
  {
    "key": "ctrl+g",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+n",
    "command": "search.action.focusNextSearchResult",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+p",
    "command": "search.action.focusPreviousSearchResult",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+g",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor && !inputBoxFocus"
  },
  {
    "key": "escape",
    "command": "-search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+g",
    "command": "-workbench.action.gotoLine"
  },
  {
    "key": "cmd+k f12",
    "command": "-editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  //=== Remap cmd+shift+l
  //==============================================================================================
  {
    "key": "ctrl+cmd+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  //=== Search editor: Fix conflict for "Search again"
  //==============================================================================================
  {
    "key": "shift+cmd+r",
    "command": "-solargraph.search"
  },
  {
    "key": "cmd+k cmd+u",
    "command": "workbench.debug.action.toggleRepl"
  },
  {
    "key": "shift+cmd+`",
    "command": "workbench.action.quit"
  },
  {
    "key": "cmd+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletFocus"
  },
  {
    "key": "shift+r",
    "command": "editor.emmet.action.matchTag",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode == 'Normal'"
  },
  {
    "key": "cmd+k cmd+j",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+k cmd+d",
    "command": "-editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+k cmd+a",
    "command": "workbench.action.showAllEditors"
  },
  {
    "key": "alt+cmd+tab",
    "command": "-workbench.action.showAllEditors"
  }
]
